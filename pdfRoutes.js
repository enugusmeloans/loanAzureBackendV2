import PDFDocument from 'pdfkit';
import fs from 'fs';
import express from 'express';
import sql from 'mssql';
import dotenv from 'dotenv';

dotenv.config();

const router = express.Router();
const config = process.env.DATABASE_URI;

// Function to generate a PDF with a custom header, body, and footer
function generatePDF(data, filePath, headerText, footerText) {
    return new Promise((resolve, reject) => {
        const doc = new PDFDocument();
        const stream = fs.createWriteStream(filePath);

        doc.pipe(stream);

        // Add header
        doc.fontSize(20).text(headerText, { align: 'center' });
        doc.moveDown();

        // Add table body
        doc.fontSize(12);
        const tableTop = doc.y;
        const columnWidths = [100, 150, 150, 100]; // Adjust column widths as needed

        // Table header
        doc.text('Application ID', 50, tableTop, { width: columnWidths[0], align: 'left' });
        doc.text('Applicant Name', 150, tableTop, { width: columnWidths[1], align: 'left' });
        doc.text('Business Name', 300, tableTop, { width: columnWidths[2], align: 'left' });
        doc.text('Loan Status', 450, tableTop, { width: columnWidths[3], align: 'left' });

        let rowY = tableTop + 20;

        // Table rows
        data.forEach((row) => {
            doc.text(row.applicationId, 50, rowY, { width: columnWidths[0], align: 'left' });
            doc.text(row.applicantName, 150, rowY, { width: columnWidths[1], align: 'left' });
            doc.text(row.businessName, 300, rowY, { width: columnWidths[2], align: 'left' });
            doc.text(row.loanStatus, 450, rowY, { width: columnWidths[3], align: 'left' });
            rowY += 20;
        });

        // Add footer
        doc.moveDown(2);
        doc.fontSize(10).text(footerText, { align: 'center' });

        doc.end();

        stream.on('finish', () => resolve(filePath));
        stream.on('error', (err) => reject(err));
    });
}

// Endpoint to generate and download a PDF for all rejected applications
router.get('/download-rejected-applications', async (req, res) => {
    try {
        const poolConnection = await sql.connect(config);

        // Query to fetch all rejected applications
        const result = await poolConnection.request().query(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM dbo.Applications
            INNER JOIN dbo.PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN dbo.BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Rejected1' OR Applications.loanStatus = 'Rejected2'
        `);

        poolConnection.close();

        const data = result.recordset;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No rejected applications found' });
        }

        const filePath = 'rejected_applications.pdf';
        const headerText = 'Rejected Applications Report';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for applications with loanStatus of Accepted1
router.get('/download-accepted1-applications-pdf', async (req, res) => {
    try {
        const poolConnection = await sql.connect(config);

        // Query to fetch all detailed data for applications with loanStatus of Accepted1
        const result = await poolConnection.request().query(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM dbo.Applications
            INNER JOIN dbo.PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN dbo.BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Accepted1'
        `);

        poolConnection.close();

        const data = result.recordset;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No applications with loanStatus of Accepted1 found' });
        }

        const filePath = 'accepted1_applications.pdf';
        const headerText = 'Accepted Applications by AI';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for applications with loanStatus of Accepted2
router.get('/download-accepted2-applications-pdf', async (req, res) => {
    try {
        const poolConnection = await sql.connect(config);

        // Query to fetch all detailed data for applications with loanStatus of Accepted2
        const result = await poolConnection.request().query(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM dbo.Applications
            INNER JOIN dbo.PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN dbo.BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Accepted2'
        `);

        poolConnection.close();

        const data = result.recordset;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No applications with loanStatus of Accepted2 found' });
        }

        const filePath = 'accepted2_applications.pdf';
        const headerText = 'Accepted Applications by Admin';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for applications with loanStatus of Resubmit
router.get('/download-resubmit-applications-pdf', async (req, res) => {
    try {
        const poolConnection = await sql.connect(config);

        // Query to fetch all detailed data for applications with loanStatus of Resubmit
        const result = await poolConnection.request().query(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM dbo.Applications
            INNER JOIN dbo.PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN dbo.BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Resubmit'
        `);

        poolConnection.close();

        const data = result.recordset;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No applications with loanStatus of Resubmit found' });
        }

        const filePath = 'resubmit_applications.pdf';
        const headerText = 'Applications Awaiting Resubmission';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

export default router;