import PDFDocument from 'pdfkit';
import fs from 'fs';
import express from 'express';
import dotenv from 'dotenv';
import mysql from 'mysql2/promise'; // Use mysql2 for promise-based queries
import jwt from 'jsonwebtoken';

dotenv.config();

const router = express.Router();
const config = process.env.NODE_ENV === "production" ? process.env.DATABASE_URI : process.env.DATABASE_PUBLIC_URI;

// Function to generate a PDF with a custom header, body, and footer
function generatePDF(data, filePath, headerText, footerText) {
    return new Promise((resolve, reject) => {
        const doc = new PDFDocument();
        const stream = fs.createWriteStream(filePath);

        doc.pipe(stream);

        // Add header
        doc.fontSize(20).text(headerText, { align: 'center' });
        doc.moveDown();

        // Add table body
        doc.fontSize(12);
        const tableTop = doc.y;
        const columnWidths = [100, 150, 150, 100]; // Adjust column widths as needed

        // Table header
        doc.text('Application ID', 50, tableTop, { width: columnWidths[0], align: 'left' });
        doc.text('Applicant Name', 150, tableTop, { width: columnWidths[1], align: 'left' });
        doc.text('Business Name', 300, tableTop, { width: columnWidths[2], align: 'left' });
        doc.text('Loan Status', 450, tableTop, { width: columnWidths[3], align: 'left' });

        let rowY = tableTop + 20;

        // Table rows
        data.forEach((row) => {
            doc.text(row.applicationId, 50, rowY, { width: columnWidths[0], align: 'left' });
            doc.text(row.applicantName, 150, rowY, { width: columnWidths[1], align: 'left' });
            doc.text(row.businessName, 300, rowY, { width: columnWidths[2], align: 'left' });
            doc.text(row.loanStatus, 450, rowY, { width: columnWidths[3], align: 'left' });
            rowY += 20;
        });

        // Add footer
        doc.moveDown(2);
        doc.fontSize(10).text(footerText, { align: 'center' });

        doc.end();

        stream.on('finish', () => resolve(filePath));
        stream.on('error', (err) => reject(err));
    });
}

// Function to generate a formal, formatted PDF for a single application
async function generateApplicationPDF(application, filePath) {
    return new Promise((resolve, reject) => {
        const doc = new PDFDocument({ margin: 50 });
        const stream = fs.createWriteStream(filePath);
        doc.pipe(stream);

        // Header
        doc
            .fontSize(22)
            .font('Helvetica-Bold')
            .text('Loan Application Report', { align: 'center' })
            .moveDown(1);

        // Application Info Section
        doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text('Application Details', { underline: true })
            .moveDown(0.5);

        doc
            .fontSize(12)
            .font('Helvetica')
            .text(`Application ID: `, { continued: true })
            .font('Helvetica-Bold')
            .text(application.applicationId)
            .font('Helvetica')
            .text(`Applicant Name: `, { continued: true })
            .font('Helvetica-Bold')
            .text(application.applicantName)
            .font('Helvetica')
            .text(`Business Name: `, { continued: true })
            .font('Helvetica-Bold')
            .text(application.businessName)
            .font('Helvetica')
            .text(`Loan Status: `, { continued: true })
            .font('Helvetica-Bold')
            .text(application.loanStatus)
            .moveDown(1);

        // Optionally add more details if available
        if (application.dateSubmitted) {
            doc.font('Helvetica').text(`Date Submitted: `, { continued: true })
                .font('Helvetica-Bold').text(application.dateSubmitted).moveDown(0.5);
        }
        if (application.email) {
            doc.font('Helvetica').text(`Email: `, { continued: true })
                .font('Helvetica-Bold').text(application.email).moveDown(0.5);
        }
        if (application.phone) {
            doc.font('Helvetica').text(`Phone: `, { continued: true })
                .font('Helvetica-Bold').text(application.phone).moveDown(0.5);
        }
        // Add more fields as needed

        // Footer
        doc.moveDown(2);
        doc.fontSize(10).font('Helvetica-Oblique').text('Generated by Loan Application System', { align: 'center' });

        doc.end();
        stream.on('finish', () => resolve(filePath));
        stream.on('error', (err) => reject(err));
    });
}

// Endpoint to generate and download a PDF for all rejected applications
router.get('/download-rejected-applications', async (req, res) => {
    try {
        const poolConnection = await mysql.createConnection(config);

        // Query to fetch all rejected applications
        const [rows] = await poolConnection.execute(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM Applications
            INNER JOIN PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Rejected1' OR Applications.loanStatus = 'Rejected2'
        `);

        await poolConnection.end();

        const data = rows;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No rejected applications found' });
        }

        const filePath = 'rejected_applications.pdf';
        const headerText = 'Rejected Applications Report';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for applications with loanStatus of Accepted1
router.get('/download-accepted1-applications-pdf', async (req, res) => {
    try {
        const poolConnection = await mysql.createConnection(config);

        // Query to fetch all detailed data for applications with loanStatus of Accepted1
        const [rows] = await poolConnection.execute(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM Applications
            INNER JOIN PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Accepted1'
        `);

        await poolConnection.end();

        const data = rows;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No applications with loanStatus of Accepted1 found' });
        }

        const filePath = 'accepted1_applications.pdf';
        const headerText = 'Accepted Applications by AI';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for applications with loanStatus of Accepted2
router.get('/download-accepted2-applications-pdf', async (req, res) => {
    try {
        const poolConnection = await mysql.createConnection(config);

        // Query to fetch all detailed data for applications with loanStatus of Accepted2
        const [rows] = await poolConnection.execute(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM Applications
            INNER JOIN PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Accepted2'
        `);

        await poolConnection.end();

        const data = rows;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No applications with loanStatus of Accepted2 found' });
        }

        const filePath = 'accepted2_applications.pdf';
        const headerText = 'Accepted Applications by Admin';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for applications with loanStatus of Resubmit
router.get('/download-resubmit-applications-pdf', async (req, res) => {
    try {
        const poolConnection = await mysql.createConnection(config);

        // Query to fetch all detailed data for applications with loanStatus of Resubmit
        const [rows] = await poolConnection.execute(`
            SELECT 
                Applications.applicationId,
                PersonalInfo.fullName AS applicantName,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM Applications
            INNER JOIN PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.loanStatus = 'Resubmit'
        `);

        await poolConnection.end();

        const data = rows;

        if (data.length === 0) {
            return res.status(404).json({ error: 'No applications with loanStatus of Resubmit found' });
        }

        const filePath = 'resubmit_applications.pdf';
        const headerText = 'Applications Awaiting Resubmission';
        const footerText = 'Generated by Loan Application System';

        await generatePDF(data, filePath, headerText, footerText);

        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }

            // Delete the file after sending it
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate PDF' });
    }
});

// Endpoint to generate and download a PDF for a single application by applicationId
router.get('/download-application-pdf/:applicationId', async (req, res) => {
    const { applicationId } = req.params;
    try {
        const poolConnection = await mysql.createConnection(config);
        // Fetch application details (add more fields as needed)
        const [rows] = await poolConnection.execute(`
            SELECT 
                Applications.applicationId,
                Applications.dateSubmitted,
                PersonalInfo.fullName AS applicantName,
                PersonalInfo.email,
                PersonalInfo.phone,
                BusinessInfo.businessName,
                Applications.loanStatus
            FROM Applications
            INNER JOIN PersonalInfo ON Applications.applicationId = PersonalInfo.applicationId
            INNER JOIN BusinessInfo ON Applications.applicationId = BusinessInfo.applicationId
            WHERE Applications.applicationId = ?
        `, [applicationId]);
        await poolConnection.end();
        if (!rows.length) {
            return res.status(404).json({ error: 'Application not found' });
        }
        const application = rows[0];
        const filePath = `application_${applicationId}.pdf`;
        await generateApplicationPDF(application, filePath);
        res.download(filePath, (err) => {
            if (err) {
                console.error('Error sending file:', err);
                res.status(500).json({ error: 'Failed to download PDF' });
            }
            fs.unlink(filePath, (unlinkErr) => {
                if (unlinkErr) {
                    console.error('Error deleting file:', unlinkErr);
                }
            });
        });
    } catch (err) {
        console.error('Error generating application PDF:', err.message);
        res.status(500).json({ error: 'Failed to generate application PDF' });
    }
});

export default router;